name: Build OpenWrt (Docker)

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      device:
        description: 'Target device'
        required: false
        default: 'netgear-r6850'
        type: choice
        options:
          - netgear-r6850
      profile:
        description: 'Build profile'
        required: false
        default: 'home'
        type: choice
        options:
          - home
          - business
      clean_build:
        description: 'Clean build environment'
        required: false
        default: false
        type: boolean
      force_rebuild:
        description: 'Force rebuild even if up-to-date'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set build matrix
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use provided inputs
            echo 'matrix={"include":[{"device":"${{ inputs.device }}","profile":"${{ inputs.profile }}","version":"v24.10.3"}]}' >> $GITHUB_OUTPUT
          else
            # Automatic trigger - use build-matrix.json
            echo "matrix=$(cat build-matrix.json | jq -c .)" >> $GITHUB_OUTPUT
          fi

  build:
    needs: prepare-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.prepare-matrix.outputs.matrix) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and cache Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Set build options
        id: build-options
        run: |
          BUILD_ARGS="-d ${{ matrix.device }} -p ${{ matrix.profile }}"
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ "${{ inputs.clean_build }}" = "true" ]; then
              BUILD_ARGS="$BUILD_ARGS --clean"
            fi
            if [ "${{ inputs.force_rebuild }}" = "true" ]; then
              BUILD_ARGS="$BUILD_ARGS --force"
            fi
          fi
          
          echo "args=$BUILD_ARGS" >> $GITHUB_OUTPUT

      - name: Run OpenWrt build
        run: |
          # Make sure the docker-build.sh script is executable
          chmod +x ./docker-build.sh
          
          # Run the build using the Docker wrapper
          ./docker-build.sh build ${{ steps.build-options.outputs.args }} --branch ${{ matrix.version }}

      - name: Find build artifacts
        id: find-artifacts
        run: |
          # Find the build output directory
          BUILD_DIR=$(find ./build -name "bin" -type d | head -1)
          if [ -n "$BUILD_DIR" ]; then
            echo "build-dir=$BUILD_DIR" >> $GITHUB_OUTPUT
            echo "Found build artifacts in: $BUILD_DIR"
            ls -la "$BUILD_DIR" || true
          else
            echo "No build artifacts found"
            find ./build -name "*.bin" -o -name "*.img" -o -name "*.tar.*" 2>/dev/null || echo "No firmware files found"
          fi

      - name: Upload build artifacts
        if: steps.find-artifacts.outputs.build-dir
        uses: actions/upload-artifact@v4
        with:
          name: openwrt-${{ matrix.device }}-${{ matrix.profile }}-${{ matrix.version }}
          path: |
            ${{ steps.find-artifacts.outputs.build-dir }}/**/*.bin
            ${{ steps.find-artifacts.outputs.build-dir }}/**/*.img
            ${{ steps.find-artifacts.outputs.build-dir }}/**/*.tar.*
            ${{ steps.find-artifacts.outputs.build-dir }}/**/sha256sums
          retention-days: 30
          if-no-files-found: warn

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.device }}-${{ matrix.profile }}-${{ matrix.version }}
          path: |
            ./build/**/logs/
            ./build/**/*.log
          retention-days: 7
          if-no-files-found: ignore

      - name: Generate build summary
        if: always()
        run: |
          echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Device**: ${{ matrix.device }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Profile**: ${{ matrix.profile }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: ${{ matrix.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -d "./build" ]; then
            echo "### Build Output Structure" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            find ./build -type f -name "*.bin" -o -name "*.img" -o -name "*.tar.*" | head -20 >> $GITHUB_STEP_SUMMARY || echo "No firmware files found" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

  create-release:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: openwrt-*
          path: ./release-artifacts

      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: build-${{ github.sha }}
          release_name: OpenWrt Build ${{ github.sha }}
          body: |
            Automated OpenWrt build from commit ${{ github.sha }}
            
            Built using Docker container for consistent reproducible builds.
            
            Built configurations:
            - Netgear R6850 (Home profile)
            - Netgear R6850 (Business profile)
          draft: false
          prerelease: true

      - name: Upload release assets
        run: |
          for artifact_dir in ./release-artifacts/openwrt-*/; do
            if [ -d "$artifact_dir" ]; then
              for file in "$artifact_dir"/*.bin "$artifact_dir"/*.img "$artifact_dir"/*.tar.*; do
                if [ -f "$file" ]; then
                  echo "Uploading: $(basename "$file")"
                  gh release upload "build-${{ github.sha }}" "$file" --clobber
                fi
              done
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}