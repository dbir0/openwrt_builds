name: OpenWrt Build System

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Check for new versions daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:
    inputs:
      device:
        description: 'Target device'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - netgear-r7800
          - netgear-r6900v2
      profile:
        description: 'Build profile'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - home
          - business
      force_version:
        description: 'Force specific OpenWrt version (optional)'
        required: false
        type: string
      clean_build:
        description: 'Clean build environment'
        required: false
        default: false
        type: boolean

env:
  TZ: UTC

jobs:
  version-check:
    runs-on: ubuntu-latest
    outputs:
      version_changed: ${{ steps.check.outputs.version_changed }}
      new_version: ${{ steps.check.outputs.new_version }}
      build_matrix: ${{ steps.matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for new OpenWrt version
        id: check
        run: |
          if [ -n "${{ github.event.inputs.force_version }}" ]; then
            ./scripts/version-check.sh --force "${{ github.event.inputs.force_version }}"
          else
            ./scripts/version-check.sh --check
          fi

      - name: Generate build matrix
        id: matrix
        if: steps.check.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [ -f build-matrix.json ]; then
            # Filter matrix based on inputs if provided
            matrix=$(cat build-matrix.json)
            
            if [ "${{ github.event.inputs.device }}" != "all" ] && [ -n "${{ github.event.inputs.device }}" ]; then
              matrix=$(echo "$matrix" | jq --arg device "${{ github.event.inputs.device }}" '.include |= map(select(.device == $device))')
            fi
            
            if [ "${{ github.event.inputs.profile }}" != "all" ] && [ -n "${{ github.event.inputs.profile }}" ]; then
              matrix=$(echo "$matrix" | jq --arg profile "${{ github.event.inputs.profile }}" '.include |= map(select(.profile == $profile))')
            fi
            
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          else
            echo "matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          fi

      - name: Upload build artifacts
        if: steps.check.outputs.version_changed == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: build-config
          path: |
            build-matrix.json
            release-notes.md
            .last_version

  build:
    needs: version-check
    if: needs.version-check.outputs.version_changed == 'true' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.version-check.outputs.build_matrix) }}
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Free up disk space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo docker image prune --all --force
          df -h

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            clang \
            flex \
            bison \
            g++ \
            gawk \
            gcc-multilib \
            g++-multilib \
            gettext \
            git \
            libncurses5-dev \
            libssl-dev \
            python3-distutils \
            rsync \
            unzip \
            zlib1g-dev \
            file \
            wget \
            curl \
            time \
            python3-setuptools \
            python3-yaml \
            python3-dev \
            swig \
            qemu-utils

      - name: Cache OpenWrt source
        uses: actions/cache@v4
        with:
          path: build/openwrt
          key: openwrt-${{ matrix.version }}-${{ hashFiles('scripts/build.sh') }}
          restore-keys: |
            openwrt-${{ matrix.version }}-
            openwrt-

      - name: Cache build dependencies
        uses: actions/cache@v4
        with:
          path: |
            build/openwrt/dl
            build/openwrt/staging_dir/host
          key: openwrt-deps-${{ matrix.version }}-${{ matrix.device }}
          restore-keys: |
            openwrt-deps-${{ matrix.version }}-
            openwrt-deps-

      - name: Build firmware
        run: |
          export FORCE_UNSAFE_CONFIGURE=1
          build_args="--device ${{ matrix.device }} --profile ${{ matrix.profile }}"
          
          if [ -n "${{ matrix.version }}" ]; then
            build_args="$build_args --branch ${{ matrix.version }}"
          fi
          
          if [ "${{ github.event.inputs.clean_build }}" == "true" ]; then
            build_args="$build_args --clean"
          fi
          
          ./scripts/build.sh $build_args

      - name: Prepare artifacts
        run: |
          # Find the latest artifacts directory
          ARTIFACT_DIR=$(find artifacts/${{ matrix.device }}/${{ matrix.profile }} -type d -name "2*" | sort | tail -1)
          
          if [ -n "$ARTIFACT_DIR" ]; then
            # Create a clean artifacts directory for upload
            mkdir -p upload_artifacts
            cp -r "$ARTIFACT_DIR"/* upload_artifacts/
            
            # Rename files with consistent naming
            cd upload_artifacts
            for file in *.bin *.img; do
              if [ -f "$file" ]; then
                # Extract original filename without path
                base_name=$(basename "$file")
                # Create new name with device and profile
                new_name="${{ matrix.device }}-${{ matrix.profile }}-${base_name}"
                mv "$file" "$new_name"
              fi
            done
            
            # Create checksums
            sha256sum *.bin *.img 2>/dev/null > checksums.sha256 || true
            
            ls -la
          else
            echo "No artifacts found!"
            exit 1
          fi

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: firmware-${{ matrix.device }}-${{ matrix.profile }}
          path: upload_artifacts/
          retention-days: 30

      - name: Upload build logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs-${{ matrix.device }}-${{ matrix.profile }}
          path: |
            build/openwrt/logs/
            build/openwrt/.config
          retention-days: 7

  create-release:
    needs: [version-check, build]
    if: needs.version-check.outputs.version_changed == 'true' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download build config
        uses: actions/download-artifact@v4
        with:
          name: build-config

      - name: Download all firmware artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: firmware-*
          path: release-artifacts/
          merge-multiple: true

      - name: Prepare release
        run: |
          VERSION="${{ needs.version-check.outputs.new_version }}"
          echo "Creating release for version: $VERSION"
          
          # Create release directory structure
          mkdir -p "release/factory" "release/sysupgrade"
          
          # Organize firmware files
          cd release-artifacts
          for file in *.bin; do
            if [[ "$file" == *"factory"* ]]; then
              mv "$file" ../release/factory/
            elif [[ "$file" == *"sysupgrade"* ]]; then
              mv "$file" ../release/sysupgrade/
            else
              # If unclear, put in both directories
              cp "$file" ../release/factory/
              cp "$file" ../release/sysupgrade/
            fi
          done
          
          # Copy other files
          cp *.sha256 ../release/ 2>/dev/null || true
          cp *.txt ../release/ 2>/dev/null || true
          
          cd ..
          
          # Create archive
          tar -czf "openwrt-custom-builds-${VERSION}.tar.gz" release/
          
          ls -la release/
          ls -la

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.version-check.outputs.new_version }}
          name: OpenWrt Custom Build ${{ needs.version-check.outputs.new_version }}
          body_path: release-notes.md
          files: |
            openwrt-custom-builds-${{ needs.version-check.outputs.new_version }}.tar.gz
            release/factory/*
            release/sysupgrade/*
            release/*.sha256
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    needs: [version-check, build, create-release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Notify build status
        run: |
          VERSION="${{ needs.version-check.outputs.new_version }}"
          BUILD_STATUS="${{ needs.build.result }}"
          RELEASE_STATUS="${{ needs.create-release.result }}"
          
          if [ "$BUILD_STATUS" == "success" ] && [ "$RELEASE_STATUS" == "success" ]; then
            echo "✅ OpenWrt build $VERSION completed successfully!"
            echo "📦 Release created with firmware images for all supported devices"
          elif [ "$BUILD_STATUS" == "success" ] && [ "$RELEASE_STATUS" != "success" ]; then
            echo "⚠️ OpenWrt build $VERSION completed but release creation failed"
          else
            echo "❌ OpenWrt build $VERSION failed"
          fi
          
          echo "Build details:"
          echo "- Version: $VERSION"
          echo "- Build Status: $BUILD_STATUS"
          echo "- Release Status: $RELEASE_STATUS"
          echo "- Trigger: ${{ github.event_name }}"
          echo "- Repository: ${{ github.repository }}"
          echo "- Run ID: ${{ github.run_id }}"